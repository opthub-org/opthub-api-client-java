/*
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthErrorResponse;
import org.openapitools.client.model.CreateMatchTrial400Response;
import org.openapitools.client.model.CreateMatchTrial403Response;
import org.openapitools.client.model.CreateMatchTrial404Response;
import org.openapitools.client.model.CreateMatchTrialRequest;
import org.openapitools.client.model.GetMatchEvaluation404Response;
import org.openapitools.client.model.GetMatchScore404Response;
import org.openapitools.client.model.GetMatchTrial403Response;
import org.openapitools.client.model.GetMatchTrial404Response;
import org.openapitools.client.model.GetSolution404Response;
import org.openapitools.client.model.MatchTrialEvaluation;
import org.openapitools.client.model.MatchTrialResponse;
import org.openapitools.client.model.MatchTrialScore;
import org.openapitools.client.model.ServerErrorResponse;
import org.openapitools.client.model.Solution;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MatchTrialsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MatchTrialsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MatchTrialsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMatchTrial
     * @param matchUuid Match UUID (required)
     * @param createMatchTrialRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information of the created match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMatchTrialCall(UUID matchUuid, CreateMatchTrialRequest createMatchTrialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMatchTrialRequest;

        // create path and map variables
        String localVarPath = "/matches/{match_uuid}/trials"
            .replace("{" + "match_uuid" + "}", localVarApiClient.escapeString(matchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMatchTrialValidateBeforeCall(UUID matchUuid, CreateMatchTrialRequest createMatchTrialRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchUuid' is set
        if (matchUuid == null) {
            throw new ApiException("Missing the required parameter 'matchUuid' when calling createMatchTrial(Async)");
        }

        return createMatchTrialCall(matchUuid, createMatchTrialRequest, _callback);

    }

    /**
     * Create a match trial
     * 
     * @param matchUuid Match UUID (required)
     * @param createMatchTrialRequest  (optional)
     * @return MatchTrialResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information of the created match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public MatchTrialResponse createMatchTrial(UUID matchUuid, CreateMatchTrialRequest createMatchTrialRequest) throws ApiException {
        ApiResponse<MatchTrialResponse> localVarResp = createMatchTrialWithHttpInfo(matchUuid, createMatchTrialRequest);
        return localVarResp.getData();
    }

    /**
     * Create a match trial
     * 
     * @param matchUuid Match UUID (required)
     * @param createMatchTrialRequest  (optional)
     * @return ApiResponse&lt;MatchTrialResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information of the created match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchTrialResponse> createMatchTrialWithHttpInfo(UUID matchUuid, CreateMatchTrialRequest createMatchTrialRequest) throws ApiException {
        okhttp3.Call localVarCall = createMatchTrialValidateBeforeCall(matchUuid, createMatchTrialRequest, null);
        Type localVarReturnType = new TypeToken<MatchTrialResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a match trial (asynchronously)
     * 
     * @param matchUuid Match UUID (required)
     * @param createMatchTrialRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information of the created match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMatchTrialAsync(UUID matchUuid, CreateMatchTrialRequest createMatchTrialRequest, final ApiCallback<MatchTrialResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMatchTrialValidateBeforeCall(matchUuid, createMatchTrialRequest, _callback);
        Type localVarReturnType = new TypeToken<MatchTrialResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMatchEvaluation
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatchEvaluationCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{match_uuid}/trials/{trial_no}/evaluation"
            .replace("{" + "match_uuid" + "}", localVarApiClient.escapeString(matchUuid.toString()))
            .replace("{" + "trial_no" + "}", localVarApiClient.escapeString(trialNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatchEvaluationValidateBeforeCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchUuid' is set
        if (matchUuid == null) {
            throw new ApiException("Missing the required parameter 'matchUuid' when calling getMatchEvaluation(Async)");
        }

        // verify the required parameter 'trialNo' is set
        if (trialNo == null) {
            throw new ApiException("Missing the required parameter 'trialNo' when calling getMatchEvaluation(Async)");
        }

        return getMatchEvaluationCall(matchUuid, trialNo, _callback);

    }

    /**
     * Retrieve status of a specific match evaluation related to the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return MatchTrialEvaluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public MatchTrialEvaluation getMatchEvaluation(UUID matchUuid, Integer trialNo) throws ApiException {
        ApiResponse<MatchTrialEvaluation> localVarResp = getMatchEvaluationWithHttpInfo(matchUuid, trialNo);
        return localVarResp.getData();
    }

    /**
     * Retrieve status of a specific match evaluation related to the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return ApiResponse&lt;MatchTrialEvaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchTrialEvaluation> getMatchEvaluationWithHttpInfo(UUID matchUuid, Integer trialNo) throws ApiException {
        okhttp3.Call localVarCall = getMatchEvaluationValidateBeforeCall(matchUuid, trialNo, null);
        Type localVarReturnType = new TypeToken<MatchTrialEvaluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve status of a specific match evaluation related to the Solution submitted by the Participant themselves. (asynchronously)
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatchEvaluationAsync(UUID matchUuid, Integer trialNo, final ApiCallback<MatchTrialEvaluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatchEvaluationValidateBeforeCall(matchUuid, trialNo, _callback);
        Type localVarReturnType = new TypeToken<MatchTrialEvaluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMatchScore
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatchScoreCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{match_uuid}/trials/{trial_no}/score"
            .replace("{" + "match_uuid" + "}", localVarApiClient.escapeString(matchUuid.toString()))
            .replace("{" + "trial_no" + "}", localVarApiClient.escapeString(trialNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatchScoreValidateBeforeCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchUuid' is set
        if (matchUuid == null) {
            throw new ApiException("Missing the required parameter 'matchUuid' when calling getMatchScore(Async)");
        }

        // verify the required parameter 'trialNo' is set
        if (trialNo == null) {
            throw new ApiException("Missing the required parameter 'trialNo' when calling getMatchScore(Async)");
        }

        return getMatchScoreCall(matchUuid, trialNo, _callback);

    }

    /**
     * Retrieve status of a specific match score related to the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return MatchTrialScore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public MatchTrialScore getMatchScore(UUID matchUuid, Integer trialNo) throws ApiException {
        ApiResponse<MatchTrialScore> localVarResp = getMatchScoreWithHttpInfo(matchUuid, trialNo);
        return localVarResp.getData();
    }

    /**
     * Retrieve status of a specific match score related to the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return ApiResponse&lt;MatchTrialScore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchTrialScore> getMatchScoreWithHttpInfo(UUID matchUuid, Integer trialNo) throws ApiException {
        okhttp3.Call localVarCall = getMatchScoreValidateBeforeCall(matchUuid, trialNo, null);
        Type localVarReturnType = new TypeToken<MatchTrialScore>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve status of a specific match score related to the Solution submitted by the Participant themselves. (asynchronously)
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatchScoreAsync(UUID matchUuid, Integer trialNo, final ApiCallback<MatchTrialScore> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatchScoreValidateBeforeCall(matchUuid, trialNo, _callback);
        Type localVarReturnType = new TypeToken<MatchTrialScore>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMatchTrial
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatchTrialCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{match_uuid}/trials/{trial_no}"
            .replace("{" + "match_uuid" + "}", localVarApiClient.escapeString(matchUuid.toString()))
            .replace("{" + "trial_no" + "}", localVarApiClient.escapeString(trialNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMatchTrialValidateBeforeCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchUuid' is set
        if (matchUuid == null) {
            throw new ApiException("Missing the required parameter 'matchUuid' when calling getMatchTrial(Async)");
        }

        // verify the required parameter 'trialNo' is set
        if (trialNo == null) {
            throw new ApiException("Missing the required parameter 'trialNo' when calling getMatchTrial(Async)");
        }

        return getMatchTrialCall(matchUuid, trialNo, _callback);

    }

    /**
     * Retrieve status of a specific Match Trial related to the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return MatchTrialResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public MatchTrialResponse getMatchTrial(UUID matchUuid, Integer trialNo) throws ApiException {
        ApiResponse<MatchTrialResponse> localVarResp = getMatchTrialWithHttpInfo(matchUuid, trialNo);
        return localVarResp.getData();
    }

    /**
     * Retrieve status of a specific Match Trial related to the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return ApiResponse&lt;MatchTrialResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchTrialResponse> getMatchTrialWithHttpInfo(UUID matchUuid, Integer trialNo) throws ApiException {
        okhttp3.Call localVarCall = getMatchTrialValidateBeforeCall(matchUuid, trialNo, null);
        Type localVarReturnType = new TypeToken<MatchTrialResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve status of a specific Match Trial related to the Solution submitted by the Participant themselves. (asynchronously)
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status information of the match trial </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMatchTrialAsync(UUID matchUuid, Integer trialNo, final ApiCallback<MatchTrialResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMatchTrialValidateBeforeCall(matchUuid, trialNo, _callback);
        Type localVarReturnType = new TypeToken<MatchTrialResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSolution
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solution information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSolutionCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/matches/{match_uuid}/trials/{trial_no}/solution"
            .replace("{" + "match_uuid" + "}", localVarApiClient.escapeString(matchUuid.toString()))
            .replace("{" + "trial_no" + "}", localVarApiClient.escapeString(trialNo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSolutionValidateBeforeCall(UUID matchUuid, Integer trialNo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'matchUuid' is set
        if (matchUuid == null) {
            throw new ApiException("Missing the required parameter 'matchUuid' when calling getSolution(Async)");
        }

        // verify the required parameter 'trialNo' is set
        if (trialNo == null) {
            throw new ApiException("Missing the required parameter 'trialNo' when calling getSolution(Async)");
        }

        return getSolutionCall(matchUuid, trialNo, _callback);

    }

    /**
     * Retrieve the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return Solution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solution information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public Solution getSolution(UUID matchUuid, Integer trialNo) throws ApiException {
        ApiResponse<Solution> localVarResp = getSolutionWithHttpInfo(matchUuid, trialNo);
        return localVarResp.getData();
    }

    /**
     * Retrieve the Solution submitted by the Participant themselves.
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @return ApiResponse&lt;Solution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solution information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Solution> getSolutionWithHttpInfo(UUID matchUuid, Integer trialNo) throws ApiException {
        okhttp3.Call localVarCall = getSolutionValidateBeforeCall(matchUuid, trialNo, null);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the Solution submitted by the Participant themselves. (asynchronously)
     * 
     * @param matchUuid Match UUID (required)
     * @param trialNo Trial number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Solution information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The entry specified in the query was not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSolutionAsync(UUID matchUuid, Integer trialNo, final ApiCallback<Solution> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSolutionValidateBeforeCall(matchUuid, trialNo, _callback);
        Type localVarReturnType = new TypeToken<Solution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
