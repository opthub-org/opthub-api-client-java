/*
 * OptHub REST API
 * OptHubの公開REST APIです。
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ParticipantType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 解の作成リクエストの結果
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-07T07:39:20.995933705Z[Etc/UTC]", comments = "Generator version: 7.8.0-SNAPSHOT")
public class CreateSolutionResponse {
  public static final String SERIALIZED_NAME_MATCH_ID = "matchId";
  @SerializedName(SERIALIZED_NAME_MATCH_ID)
  private UUID matchId;

  public static final String SERIALIZED_NAME_PARTICIPANT_TYPE = "participantType";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_TYPE)
  private ParticipantType participantType;

  public static final String SERIALIZED_NAME_PARTICIPANT_ID = "participantId";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ID)
  private UUID participantId;

  public static final String SERIALIZED_NAME_TRIAL_NO = "trialNo";
  @SerializedName(SERIALIZED_NAME_TRIAL_NO)
  private Integer trialNo;

  public CreateSolutionResponse() {
  }

  public CreateSolutionResponse matchId(UUID matchId) {
    this.matchId = matchId;
    return this;
  }

  /**
   * 競技のID
   * @return matchId
   */
  @javax.annotation.Nonnull
  public UUID getMatchId() {
    return matchId;
  }

  public void setMatchId(UUID matchId) {
    this.matchId = matchId;
  }


  public CreateSolutionResponse participantType(ParticipantType participantType) {
    this.participantType = participantType;
    return this;
  }

  /**
   * Get participantType
   * @return participantType
   */
  @javax.annotation.Nonnull
  public ParticipantType getParticipantType() {
    return participantType;
  }

  public void setParticipantType(ParticipantType participantType) {
    this.participantType = participantType;
  }


  public CreateSolutionResponse participantId(UUID participantId) {
    this.participantId = participantId;
    return this;
  }

  /**
   * 参加者のID
   * @return participantId
   */
  @javax.annotation.Nonnull
  public UUID getParticipantId() {
    return participantId;
  }

  public void setParticipantId(UUID participantId) {
    this.participantId = participantId;
  }


  public CreateSolutionResponse trialNo(Integer trialNo) {
    this.trialNo = trialNo;
    return this;
  }

  /**
   * 試行番号
   * @return trialNo
   */
  @javax.annotation.Nonnull
  public Integer getTrialNo() {
    return trialNo;
  }

  public void setTrialNo(Integer trialNo) {
    this.trialNo = trialNo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSolutionResponse createSolutionResponse = (CreateSolutionResponse) o;
    return Objects.equals(this.matchId, createSolutionResponse.matchId) &&
        Objects.equals(this.participantType, createSolutionResponse.participantType) &&
        Objects.equals(this.participantId, createSolutionResponse.participantId) &&
        Objects.equals(this.trialNo, createSolutionResponse.trialNo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(matchId, participantType, participantId, trialNo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSolutionResponse {\n");
    sb.append("    matchId: ").append(toIndentedString(matchId)).append("\n");
    sb.append("    participantType: ").append(toIndentedString(participantType)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    trialNo: ").append(toIndentedString(trialNo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("matchId");
    openapiFields.add("participantType");
    openapiFields.add("participantId");
    openapiFields.add("trialNo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("matchId");
    openapiRequiredFields.add("participantType");
    openapiRequiredFields.add("participantId");
    openapiRequiredFields.add("trialNo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSolutionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSolutionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSolutionResponse is not found in the empty JSON string", CreateSolutionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSolutionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSolutionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSolutionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("matchId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchId").toString()));
      }
      // validate the required field `participantType`
      ParticipantType.validateJsonElement(jsonObj.get("participantType"));
      if (!jsonObj.get("participantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `participantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("participantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSolutionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSolutionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSolutionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSolutionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSolutionResponse>() {
           @Override
           public void write(JsonWriter out, CreateSolutionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSolutionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSolutionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSolutionResponse
   * @throws IOException if the JSON string is invalid with respect to CreateSolutionResponse
   */
  public static CreateSolutionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSolutionResponse.class);
  }

  /**
   * Convert an instance of CreateSolutionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

