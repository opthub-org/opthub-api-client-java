/*
 * OptHub REST API
 * OptHub Public REST API.
 *
 * The version of the OpenAPI document: 0.3.0
 * Contact: dev@opthub.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RunnerStatus;
import org.openapitools.client.model.ScalarOrVector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evaluation results
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-06T06:41:36.573601911Z[Etc/UTC]", comments = "Generator version: 7.8.0-SNAPSHOT")
public class MatchTrialEvaluation {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RunnerStatus status;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_OBJECTIVE = "objective";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE)
  private ScalarOrVector objective;

  public static final String SERIALIZED_NAME_CONSTRAINT = "constraint";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT)
  private ScalarOrVector constraint;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private Object info;

  public static final String SERIALIZED_NAME_FEASIBLE = "feasible";
  @SerializedName(SERIALIZED_NAME_FEASIBLE)
  private Boolean feasible;

  public static final String SERIALIZED_NAME_STARTED_AT = "startedAt";
  @SerializedName(SERIALIZED_NAME_STARTED_AT)
  private OffsetDateTime startedAt;

  public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public MatchTrialEvaluation() {
  }

  public MatchTrialEvaluation status(RunnerStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public RunnerStatus getStatus() {
    return status;
  }

  public void setStatus(RunnerStatus status) {
    this.status = status;
  }


  public MatchTrialEvaluation error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Evaluation error information
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public MatchTrialEvaluation objective(ScalarOrVector objective) {
    this.objective = objective;
    return this;
  }

  /**
   * Get objective
   * @return objective
   */
  @javax.annotation.Nullable
  public ScalarOrVector getObjective() {
    return objective;
  }

  public void setObjective(ScalarOrVector objective) {
    this.objective = objective;
  }


  public MatchTrialEvaluation constraint(ScalarOrVector constraint) {
    this.constraint = constraint;
    return this;
  }

  /**
   * Get constraint
   * @return constraint
   */
  @javax.annotation.Nullable
  public ScalarOrVector getConstraint() {
    return constraint;
  }

  public void setConstraint(ScalarOrVector constraint) {
    this.constraint = constraint;
  }


  public MatchTrialEvaluation info(Object info) {
    this.info = info;
    return this;
  }

  /**
   * Auxiliary information for evaluation
   * @return info
   */
  @javax.annotation.Nullable
  public Object getInfo() {
    return info;
  }

  public void setInfo(Object info) {
    this.info = info;
  }


  public MatchTrialEvaluation feasible(Boolean feasible) {
    this.feasible = feasible;
    return this;
  }

  /**
   * Whether it is a feasible solution
   * @return feasible
   */
  @javax.annotation.Nullable
  public Boolean getFeasible() {
    return feasible;
  }

  public void setFeasible(Boolean feasible) {
    this.feasible = feasible;
  }


  public MatchTrialEvaluation startedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
    return this;
  }

  /**
   * Evaluation start date and time
   * @return startedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartedAt() {
    return startedAt;
  }

  public void setStartedAt(OffsetDateTime startedAt) {
    this.startedAt = startedAt;
  }


  public MatchTrialEvaluation finishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
    return this;
  }

  /**
   * Evaluation end date and time
   * @return finishedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }

  public void setFinishedAt(OffsetDateTime finishedAt) {
    this.finishedAt = finishedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchTrialEvaluation matchTrialEvaluation = (MatchTrialEvaluation) o;
    return Objects.equals(this.status, matchTrialEvaluation.status) &&
        Objects.equals(this.error, matchTrialEvaluation.error) &&
        Objects.equals(this.objective, matchTrialEvaluation.objective) &&
        Objects.equals(this.constraint, matchTrialEvaluation.constraint) &&
        Objects.equals(this.info, matchTrialEvaluation.info) &&
        Objects.equals(this.feasible, matchTrialEvaluation.feasible) &&
        Objects.equals(this.startedAt, matchTrialEvaluation.startedAt) &&
        Objects.equals(this.finishedAt, matchTrialEvaluation.finishedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, error, objective, constraint, info, feasible, startedAt, finishedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchTrialEvaluation {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("    constraint: ").append(toIndentedString(constraint)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    feasible: ").append(toIndentedString(feasible)).append("\n");
    sb.append("    startedAt: ").append(toIndentedString(startedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("error");
    openapiFields.add("objective");
    openapiFields.add("constraint");
    openapiFields.add("info");
    openapiFields.add("feasible");
    openapiFields.add("startedAt");
    openapiFields.add("finishedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("startedAt");
    openapiRequiredFields.add("finishedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchTrialEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchTrialEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchTrialEvaluation is not found in the empty JSON string", MatchTrialEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchTrialEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchTrialEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MatchTrialEvaluation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `status`
      RunnerStatus.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      // validate the optional field `objective`
      if (jsonObj.get("objective") != null && !jsonObj.get("objective").isJsonNull()) {
        ScalarOrVector.validateJsonElement(jsonObj.get("objective"));
      }
      // validate the optional field `constraint`
      if (jsonObj.get("constraint") != null && !jsonObj.get("constraint").isJsonNull()) {
        ScalarOrVector.validateJsonElement(jsonObj.get("constraint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchTrialEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchTrialEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchTrialEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchTrialEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchTrialEvaluation>() {
           @Override
           public void write(JsonWriter out, MatchTrialEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchTrialEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchTrialEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchTrialEvaluation
   * @throws IOException if the JSON string is invalid with respect to MatchTrialEvaluation
   */
  public static MatchTrialEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchTrialEvaluation.class);
  }

  /**
   * Convert an instance of MatchTrialEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

